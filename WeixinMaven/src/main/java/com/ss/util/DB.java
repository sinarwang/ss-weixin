package com.ss.util;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.log4j.Logger;

/**
 * 封装有跟数据库进行交互方法的类。
 * @author Administrator
 *
 */
public class DB {
	private static Logger logger = LoggerUtil.getInstance();
	/**
	 * 拿到数据库连接Connection
	 * @return 数据库连接Connection类的对象
	 */
	public static Connection getConn() {
		Connection conn = null;
		try {
			Class.forName("com.mysql.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://xxx.xxx.xxx.xxx:3306/testdb", "root", "123456");
			//conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "root");
		} catch (ClassNotFoundException e) {
			logger.error("数据库连接出现问题！");
			e.printStackTrace();
		} catch (SQLException e) {
			logger.error("数据库连接出现问题！");
			e.printStackTrace();
		}
		return conn;
	}
	/**
	 * 通过Connection创建Statement。
	 * @param conn 数据库连接Connection类型对象
	 * @return Statement类的对象
	 */
	public static Statement createStmt(Connection conn) {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
		} catch (SQLException e) {
			logger.error("SQLException---createStmt");
			e.printStackTrace();
		}
		
		return stmt;
	}
	/**
	 * 通过preparedStatement构建预编译sql语句。
	 * @param conn 数据库连接Connection对象
	 * @param sql 要进行预编译的sql语句
	 * @return preparedStatement对象
	 */
	public static PreparedStatement prepareStmt(Connection conn, String sql) {
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(sql);
		} catch (SQLException e) {
			logger.error("SQLException---prepareStatement1");
			e.printStackTrace();
		}
		return pstmt;
	}
	/**
	 * 构建可以设置autoGeneratedKeys的PreparedStatement对象
	 * @param conn 数据库连接Connection对象
	 * @param sql 要进行预编译的sql语句
	 * @param autoGeneratedKeys 若设置为Statement.RETURN_GENERATED_KEYS，则构建可以返回自动生成主键的键值，若设置为Statement.NO_GENERATED_KEYS，则构建不返回生成主键键值的PreparedStatement。 
	 * @return PreparedStatement对象
	 */
	public static PreparedStatement prepareStmt(Connection conn, String sql, int autoGeneratedKeys) {
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(sql, autoGeneratedKeys);
		} catch (SQLException e) {
			logger.error("SQLException---prepareStatement2");
			e.printStackTrace();
		}
		return pstmt;
	}
	/**
	 * 通过Statement类的对象对sql语句进行更新操作。
	 * @param stmt Statement类的对象
	 * @param sql 更新操作的sql语句
	 * @return 若成功，返回true；若失败，返回false；
	 */
	public static boolean executeUpdate(Statement stmt, String sql) {
		try {
			stmt.executeUpdate(sql);
			return true;
		} catch (SQLException e) {
			logger.error("SQLException---executeUpdate1");
			e.printStackTrace();
			return false;
		}
	}
	/**
	 * 通过Statement类的对象对sql语句进行查询操作。
	 * @param stmt Statement类的对象
	 * @param sql 查询操作的sql语句
	 * @return 结果集ResultSet
	 */
	public static ResultSet executeQuery(Statement stmt, String sql) {
		ResultSet rs = null;
		try {
			rs = stmt.executeQuery(sql);
		} catch (SQLException e) {
			logger.error("SQLException---executeQuery");
			e.printStackTrace();
		}
		return rs;
	}
	/**
	 * 通过PreparedStatement类的对象进行查询操作。
	 * @param pstmt PreparedStatement类的对象
	 * @return 结果集ResultSet
	 */
	public static ResultSet executeQuery(PreparedStatement pstmt) {
		ResultSet rs = null;
		try {
			rs = pstmt.executeQuery();
		} catch (SQLException e) {
			logger.error("SQLException---pstmtExecuteQuery");
			e.printStackTrace();
		}
		return rs;
	}
	/**
	 * 通过PreparedStatement类的对象进行更新操作。
	 * @param pstmt PreparedStatement类的对象
	 * @return 执行成功，返回true；执行失败，返回false；
	 */
	public static boolean executeUpdate(PreparedStatement pstmt) {
		try {
			int i = pstmt.executeUpdate();
			logger.info(i);
			if(i != 0) {
				return true;
			}
		} catch (SQLException e) {
			logger.error("SQLException---pstmtExecuteQuery");
			e.printStackTrace();
		}
		return false;
	}
	/**
	 * 关闭数据库连接Connection。
	 * @param conn 数据库连接Connection类的对象
	 */
	public static void close(Connection conn) {
		if(conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
				logger.error("SQLException---closeConnection");
				e.printStackTrace();
			}
			conn = null;
		}
	}
	/**
	 * 关闭Statement。
	 * @param stmt Statement类的对象
	 */
	public static void close(Statement stmt) {
		if(stmt != null) {
			try {
				stmt.close();
			} catch (SQLException e) {
				logger.error("SQLException---closeStatement");
				e.printStackTrace();
			}
			stmt = null;
		}
	}
	/**
	 * 关闭结果集ResultSet
	 * @param rs 结果集ResultSet
	 */
	public static void close(ResultSet rs) {
		if(rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
				logger.error("SQLException---closeResultSet");
				e.printStackTrace();
			}
			rs = null;
		}
	}
	/**
	 * 关闭CallableStatement
	 * @param proc CallableStatement类的对象
	 */
	public static void close(CallableStatement proc) {
		if(proc != null) {
			try {
				proc.close();
			} catch (SQLException e) {
				logger.error("SQLException---closeCallableStatement");
				e.printStackTrace();
			}
			proc = null;
		}
	}
	/**
	 * 创建调用存储过程所需的CallableStatement。
	 * @param conn 数据库连接Connection。
	 * @param sql 调用存储过程的sql语句。
	 * @return 创建好的CallableStatement类的对象。
	 */
	public static CallableStatement prepareCall(Connection conn, String sql) {
		CallableStatement proc = null;
		try {
			proc = conn.prepareCall(sql);
		} catch (SQLException e) {
			logger.error("SQLException---prepareCall");
			e.printStackTrace();
		}  
		return proc;
	}
	/**
	 * 执行存储过程。
	 * @param proc 存储过程
	 * @return 若成功，返回true；若失败，返回false。
	 */
	public static boolean execute(CallableStatement proc) {
		boolean isSuccess = false;
		try {
			isSuccess = proc.execute();
		} catch (SQLException e) {
			logger.error("CallableStatement--execute--error");
			e.printStackTrace();
		}
		return isSuccess;
	}
	
	public static ResultSet executeQuery(CallableStatement proc) {
		ResultSet rs = null;
		try {
			rs = proc.executeQuery();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return rs;
	}
	
	public static void begin() {
		
	}
	
}
